type token =
  | EOF
  | MAS
  | MENOS
  | POR
  | DIVIDIDO
  | IGUAL
  | PARENTIZQ
  | PARENTDCH
  | CONSTANTE of (float)
  | COMANDO of (string)
  | VARIABLE of (string)
  | FUNCION of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
    open Instruccion;;
    open Expr_arit;;
# 21 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* MAS *);
  258 (* MENOS *);
  259 (* POR *);
  260 (* DIVIDIDO *);
  261 (* IGUAL *);
  262 (* PARENTIZQ *);
  263 (* PARENTDCH *);
    0|]

let yytransl_block = [|
  264 (* CONSTANTE *);
  265 (* COMANDO *);
  266 (* VARIABLE *);
  267 (* FUNCION *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\004\000\002\000\002\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\013\000\000\000\005\000\011\000\000\000\003\000\000\000\012\000\
\002\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\009\000\010\000\001\000"

let yydgoto = "\002\000\
\009\000\010\000"

let yysindex = "\255\255\
\024\255\000\000\034\255\034\255\000\000\002\000\004\255\034\255\
\000\000\010\000\000\000\000\000\045\255\000\000\034\255\000\000\
\000\000\034\255\034\255\034\255\034\255\000\000\014\000\001\255\
\001\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\003\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\004\000"

let yytablesize = 278
let yytable = "\001\000\
\007\000\014\000\008\000\020\000\021\000\000\000\012\000\013\000\
\015\000\017\000\000\000\016\000\000\000\028\000\000\000\000\000\
\000\000\005\000\023\000\000\000\000\000\024\000\025\000\026\000\
\027\000\003\000\000\000\000\000\000\000\004\000\000\000\005\000\
\006\000\007\000\008\000\003\000\000\000\000\000\000\000\004\000\
\000\000\005\000\000\000\011\000\008\000\018\000\019\000\020\000\
\021\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\008\000\008\000\000\000\000\000\007\000\
\000\000\008\000\018\000\019\000\020\000\021\000\018\000\019\000\
\020\000\021\000\005\000\005\000\005\000\005\000"

let yycheck = "\001\000\
\000\000\000\000\000\000\003\001\004\001\255\255\003\000\004\000\
\005\001\000\000\255\255\008\000\255\255\000\000\255\255\255\255\
\255\255\000\000\015\000\255\255\255\255\018\000\019\000\020\000\
\021\000\002\001\255\255\255\255\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\002\001\255\255\255\255\255\255\006\001\
\255\255\008\001\255\255\010\001\011\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\001\001\002\001\255\255\255\255\007\001\
\255\255\007\001\001\001\002\001\003\001\004\001\001\001\002\001\
\003\001\004\001\001\001\002\001\003\001\004\001"

let yynames_const = "\
  EOF\000\
  MAS\000\
  MENOS\000\
  POR\000\
  DIVIDIDO\000\
  IGUAL\000\
  PARENTIZQ\000\
  PARENTDCH\000\
  "

let yynames_block = "\
  CONSTANTE\000\
  COMANDO\000\
  VARIABLE\000\
  FUNCION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                               ( Asignacion (_1,_3) )
# 173 "parser.ml"
               : Instruccion.instruccion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                               ( Calculo _1 )
# 180 "parser.ml"
               : Instruccion.instruccion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 30 "parser.mly"
                               ( Comando _1 )
# 187 "parser.ml"
               : Instruccion.instruccion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 34 "parser.mly"
                                         ( Constante _1)
# 194 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 35 "parser.mly"
                                         ( Variable _1)
# 201 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                                         ( _2 )
# 208 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                                         ( Operacion_binaria (Suma,_1,_3) )
# 216 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                                         ( Operacion_binaria (Resta,_1,_3) )
# 224 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                                         ( Operacion_binaria (Producto,_1,_3) )
# 232 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                                         ( Operacion_binaria (Division,_1,_3) )
# 240 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                                         ( Operacion_unaria (Opuesto,_2) )
# 247 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                                         ( Operacion_unaria (Funcion _1,_2) )
# 255 "parser.ml"
               : 'expr))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Instruccion.instruccion)
